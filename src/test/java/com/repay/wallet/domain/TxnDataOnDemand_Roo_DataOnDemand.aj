// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.repay.wallet.domain;

import com.repay.wallet.domain.Txn;
import com.repay.wallet.domain.TxnDataOnDemand;
import com.repay.wallet.domain.TxnTypeDataOnDemand;
import com.repay.wallet.domain.UserDtlsDataOnDemand;
import com.repay.wallet.domain.WalletDataOnDemand;
import java.math.BigDecimal;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect TxnDataOnDemand_Roo_DataOnDemand {
    
    declare @type: TxnDataOnDemand: @Component;
    
    private Random TxnDataOnDemand.rnd = new SecureRandom();
    
    private List<Txn> TxnDataOnDemand.data;
    
    @Autowired
    TxnTypeDataOnDemand TxnDataOnDemand.txnTypeDataOnDemand;
    
    @Autowired
    UserDtlsDataOnDemand TxnDataOnDemand.userDtlsDataOnDemand;
    
    @Autowired
    WalletDataOnDemand TxnDataOnDemand.walletDataOnDemand;
    
    public Txn TxnDataOnDemand.getNewTransientTxn(int index) {
        Txn obj = new Txn();
        setComments(obj, index);
        setCreatedBy(obj, index);
        setCreatedOn(obj, index);
        setCurrency(obj, index);
        setDetails(obj, index);
        setModifiedOn(obj, index);
        setModifieldBy(obj, index);
        setReceiverAccountNumber(obj, index);
        setSenderAccountNumber(obj, index);
        setStatus(obj, index);
        setTaxAmount(obj, index);
        setTaxCurrency(obj, index);
        setTaxValue(obj, index);
        setTxnAmount(obj, index);
        setTxnId(obj, index);
        return obj;
    }
    
    public void TxnDataOnDemand.setComments(Txn obj, int index) {
        String comments = "comments_" + index;
        obj.setComments(comments);
    }
    
    public void TxnDataOnDemand.setCreatedBy(Txn obj, int index) {
        String createdBy = "createdBy_" + index;
        obj.setCreatedBy(createdBy);
    }
    
    public void TxnDataOnDemand.setCreatedOn(Txn obj, int index) {
        Date createdOn = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setCreatedOn(createdOn);
    }
    
    public void TxnDataOnDemand.setCurrency(Txn obj, int index) {
        String currency = "currency_" + index;
        obj.setCurrency(currency);
    }
    
    public void TxnDataOnDemand.setDetails(Txn obj, int index) {
        String details = "details_" + index;
        obj.setDetails(details);
    }
    
    public void TxnDataOnDemand.setModifiedOn(Txn obj, int index) {
        Date modifiedOn = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setModifiedOn(modifiedOn);
    }
    
    public void TxnDataOnDemand.setModifieldBy(Txn obj, int index) {
        String modifieldBy = "modifieldBy_" + index;
        obj.setModifieldBy(modifieldBy);
    }
    
    public void TxnDataOnDemand.setReceiverAccountNumber(Txn obj, int index) {
        String receiverAccountNumber = "receiverAccountNumber_" + index;
        obj.setReceiverAccountNumber(receiverAccountNumber);
    }
    
    public void TxnDataOnDemand.setSenderAccountNumber(Txn obj, int index) {
        String senderAccountNumber = "senderAccountNumber_" + index;
        obj.setSenderAccountNumber(senderAccountNumber);
    }
    
    public void TxnDataOnDemand.setStatus(Txn obj, int index) {
        String status = "status_" + index;
        obj.setStatus(status);
    }
    
    public void TxnDataOnDemand.setTaxAmount(Txn obj, int index) {
        BigDecimal taxAmount = BigDecimal.valueOf(index);
        obj.setTaxAmount(taxAmount);
    }
    
    public void TxnDataOnDemand.setTaxCurrency(Txn obj, int index) {
        String taxCurrency = "taxCurrency_" + index;
        obj.setTaxCurrency(taxCurrency);
    }
    
    public void TxnDataOnDemand.setTaxValue(Txn obj, int index) {
        BigDecimal taxValue = BigDecimal.valueOf(index);
        obj.setTaxValue(taxValue);
    }
    
    public void TxnDataOnDemand.setTxnAmount(Txn obj, int index) {
        BigDecimal txnAmount = BigDecimal.valueOf(index);
        obj.setTxnAmount(txnAmount);
    }
    
    public void TxnDataOnDemand.setTxnId(Txn obj, int index) {
        int txnId = index;
        obj.setTxnId(txnId);
    }
    
    public Txn TxnDataOnDemand.getSpecificTxn(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Txn obj = data.get(index);
        Long id = obj.getId();
        return Txn.findTxn(id);
    }
    
    public Txn TxnDataOnDemand.getRandomTxn() {
        init();
        Txn obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Txn.findTxn(id);
    }
    
    public boolean TxnDataOnDemand.modifyTxn(Txn obj) {
        return false;
    }
    
    public void TxnDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Txn.findTxnEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Txn' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Txn>();
        for (int i = 0; i < 10; i++) {
            Txn obj = getNewTransientTxn(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
